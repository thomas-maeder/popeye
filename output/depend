output/mode$(OBJ_SUFFIX): output/mode.c output/mode.h output/mode.enum.h \
 output/mode.enum output/mode.enum utilities/enumeration.h
output/mode.h:
output/mode.enum.h:
output/mode.enum:
output/mode.enum:
utilities/enumeration.h:
output/output$(OBJ_SUFFIX): output/output.c output/output.h output/mode.h \
 output/mode.enum.h output/mode.enum stipulation/stipulation.h \
 stipulation/goals/goals.h position/board.h utilities/bitmask.h \
 utilities/boolean.h stipulation/slice_type.h \
 stipulation/slice_type.enum.h stipulation/slice_type.enum \
 position/side.h position/side.enum.h position/side.enum pieces/pieces.h \
 stipulation/pipe.h stipulation/structure_traversal.h stipulation/slice.h \
 stipulation/slice_structural_type.h \
 stipulation/slice_structural_type.enum.h \
 stipulation/slice_structural_type.enum \
 stipulation/slice_functional_type.h \
 stipulation/slice_functional_type.enum.h \
 stipulation/slice_functional_type.enum \
 stipulation/slice_contextual_type.h \
 stipulation/slice_contextual_type.enum.h \
 stipulation/slice_contextual_type.enum stipulation/traversal.h \
 stipulation/slice_insertion.h output/plaintext/plaintext.h \
 output/latex/latex.h position/position.h position/color.h \
 position/color.enum.h position/color.enum position/pieceid.h \
 pieces/walks/vectors.h position/castling_rights.h input/plaintext/twin.h \
 input/plaintext/token.h input/plaintext/language.h \
 solving/machinery/twin.h solving/move_effect_journal.h \
 solving/machinery/solve.h solving/machinery/dispatch.h debugging/trace.h \
 solving/ply.h
output/output.h:
output/mode.h:
output/mode.enum.h:
output/mode.enum:
stipulation/stipulation.h:
stipulation/goals/goals.h:
position/board.h:
utilities/bitmask.h:
utilities/boolean.h:
stipulation/slice_type.h:
stipulation/slice_type.enum.h:
stipulation/slice_type.enum:
position/side.h:
position/side.enum.h:
position/side.enum:
pieces/pieces.h:
stipulation/pipe.h:
stipulation/structure_traversal.h:
stipulation/slice.h:
stipulation/slice_structural_type.h:
stipulation/slice_structural_type.enum.h:
stipulation/slice_structural_type.enum:
stipulation/slice_functional_type.h:
stipulation/slice_functional_type.enum.h:
stipulation/slice_functional_type.enum:
stipulation/slice_contextual_type.h:
stipulation/slice_contextual_type.enum.h:
stipulation/slice_contextual_type.enum:
stipulation/traversal.h:
stipulation/slice_insertion.h:
output/plaintext/plaintext.h:
output/latex/latex.h:
position/position.h:
position/color.h:
position/color.enum.h:
position/color.enum:
position/pieceid.h:
pieces/walks/vectors.h:
position/castling_rights.h:
input/plaintext/twin.h:
input/plaintext/token.h:
input/plaintext/language.h:
solving/machinery/twin.h:
solving/move_effect_journal.h:
solving/machinery/solve.h:
solving/machinery/dispatch.h:
debugging/trace.h:
solving/ply.h:
output/message$(OBJ_SUFFIX): output/message.c output/plaintext/message.h \
 output/message.h input/plaintext/language.h stipulation/stipulation.h \
 stipulation/goals/goals.h position/board.h utilities/bitmask.h \
 utilities/boolean.h stipulation/slice_type.h \
 stipulation/slice_type.enum.h stipulation/slice_type.enum \
 position/side.h position/side.enum.h position/side.enum pieces/pieces.h \
 output/mode.h output/mode.enum.h output/mode.enum \
 output/plaintext/language_dependant.h position/position.h \
 position/color.h position/color.enum.h position/color.enum \
 position/pieceid.h pieces/walks/vectors.h position/castling_rights.h \
 conditions/conditions.h options/options.h input/plaintext/twin.h \
 input/plaintext/token.h conditions/mummer.h solving/machinery/solve.h \
 solving/machinery/dispatch.h debugging/trace.h \
 conditions/anticirce/anticirce.h conditions/circe/circe.h \
 stipulation/structure_traversal.h stipulation/slice.h \
 stipulation/slice_structural_type.h \
 stipulation/slice_structural_type.enum.h \
 stipulation/slice_structural_type.enum \
 stipulation/slice_functional_type.h \
 stipulation/slice_functional_type.enum.h \
 stipulation/slice_functional_type.enum \
 stipulation/slice_contextual_type.h \
 stipulation/slice_contextual_type.enum.h \
 stipulation/slice_contextual_type.enum stipulation/traversal.h \
 stipulation/slice_insertion.h solving/move_effect_journal.h \
 solving/ply.h solving/machinery/twin.h \
 conditions/circe/rebirth_square_occupied.h \
 conditions/circe/reborn_piece.h conditions/circe/rebirth_square.h \
 conditions/circe/relevant_capture.h conditions/circe/relevant_piece.h \
 conditions/circe/relevant_side.h conditions/sentinelles.h \
 debugging/assert.h
output/plaintext/message.h:
output/message.h:
input/plaintext/language.h:
stipulation/stipulation.h:
stipulation/goals/goals.h:
position/board.h:
utilities/bitmask.h:
utilities/boolean.h:
stipulation/slice_type.h:
stipulation/slice_type.enum.h:
stipulation/slice_type.enum:
position/side.h:
position/side.enum.h:
position/side.enum:
pieces/pieces.h:
output/mode.h:
output/mode.enum.h:
output/mode.enum:
output/plaintext/language_dependant.h:
position/position.h:
position/color.h:
position/color.enum.h:
position/color.enum:
position/pieceid.h:
pieces/walks/vectors.h:
position/castling_rights.h:
conditions/conditions.h:
options/options.h:
input/plaintext/twin.h:
input/plaintext/token.h:
conditions/mummer.h:
solving/machinery/solve.h:
solving/machinery/dispatch.h:
debugging/trace.h:
conditions/anticirce/anticirce.h:
conditions/circe/circe.h:
stipulation/structure_traversal.h:
stipulation/slice.h:
stipulation/slice_structural_type.h:
stipulation/slice_structural_type.enum.h:
stipulation/slice_structural_type.enum:
stipulation/slice_functional_type.h:
stipulation/slice_functional_type.enum.h:
stipulation/slice_functional_type.enum:
stipulation/slice_contextual_type.h:
stipulation/slice_contextual_type.enum.h:
stipulation/slice_contextual_type.enum:
stipulation/traversal.h:
stipulation/slice_insertion.h:
solving/move_effect_journal.h:
solving/ply.h:
solving/machinery/twin.h:
conditions/circe/rebirth_square_occupied.h:
conditions/circe/reborn_piece.h:
conditions/circe/rebirth_square.h:
conditions/circe/relevant_capture.h:
conditions/circe/relevant_piece.h:
conditions/circe/relevant_side.h:
conditions/sentinelles.h:
debugging/assert.h:
